{
	"info": {
		"_postman_id": "475ffd2b-52c3-44ed-b6c3-5ab92a9751a5",
		"name": "Pruebas_API_Aut_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17688006"
	},
	"item": [
		{
			"name": "Carts",
			"item": [
				{
					"name": "GET /carts/user/2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validamos el codigo de respuesta",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Validamos que la respuesta devuelve un array",
									"pm.test(\"Returns array of carts\", () => {",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");",
									"});",
									"",
									"//Validamos el contenido de la respuesta",
									"pm.test(\"Each cart contains expected fields\", () => {",
									"    const carts = pm.response.json();",
									"    carts.forEach(cart => {",
									"        pm.expect(cart).to.have.property(\"id\");",
									"        pm.expect(cart).to.have.property(\"userId\");",
									"        pm.expect(cart).to.have.property(\"date\");",
									"        pm.expect(cart).to.have.property(\"products\");",
									"    });",
									"});",
									"",
									"//Validamos el tiempo de respuesta",
									"pm.test(\"Response time is below 2000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://fakestoreapi.com/carts/user/2",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"carts",
								"user",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "POST /auth/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validamos el codigo de respuesta",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//validamos que el response devuelve el token",
									"pm.test(\"Token is returned\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"mor_2314\",\n    \"password\": \"83r5^_\"\n}"
						},
						"url": {
							"raw": "https://fakestoreapi.com/auth/login",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "GET /products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validamos el estado de la respuesta",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Validamos que el response es un array",
									"pm.test(\"Response is an array\", () => {",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");",
									"});",
									"",
									"//Validamos que cada producto tenga los campos clave",
									"pm.test(\"Each product has required fields\", () => {",
									"    const products = pm.response.json();",
									"    products.forEach(product => {",
									"        pm.expect(product).to.have.property(\"id\");",
									"        pm.expect(product).to.have.property(\"title\");",
									"        pm.expect(product).to.have.property(\"price\");",
									"        pm.expect(product).to.have.property(\"category\");",
									"        pm.expect(product).to.have.property(\"image\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://fakestoreapi.com/products",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /products/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response has expected fields\", () => {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData).to.have.property(\"title\");",
									"    pm.expect(jsonData).to.have.property(\"description\");",
									"    pm.expect(jsonData).to.have.property(\"price\");",
									"    pm.expect(jsonData).to.have.property(\"category\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://fakestoreapi.com/products/1",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "POST /users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validamos el cidgo de respuesta",
									"pm.test(\"Status code is 200 or 201\", () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"//Validamos que el response contiene el id",
									"pm.test(\"Response contains user ID\", () => {",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"username\": \"testuser\",\n    \"password\": \"testpass\",\n    \"name\": {\n        \"firstname\": \"Johnny\",\n        \"lastname\": \"Doe\"\n    },\n    \"address\": {\n        \"city\": \"San Francisco\",\n        \"street\": \"Market\",\n        \"number\": 10\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://fakestoreapi.com/users",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}